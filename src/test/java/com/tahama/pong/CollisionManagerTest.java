package com.tahama.pong;

import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

class CollisionManagerTest {
	private CollisionManager cm = new CollisionManager();

	@Test
	void testCollideLeft() {
		int expectedValues[][] = { { 75, 5, 1, 1 }, { 75, 10, 1, 1 }, { 75, 15, -1, -2 }, { 75, 20, -1, -2 },
				{ 75, 25, -1, -2 }, { 75, 30, -1, -2 }, { 75, 35, -1, -2 }, { 75, 40, -1, -2 }, { 75, 45, -1, -2 },
				{ 75, 50, -1, -2 }, { 75, 55, -1, -2 }, { 75, 60, -1, -1 }, { 75, 65, -1, -1 }, { 75, 70, -1, -1 },
				{ 75, 75, -1, -1 }, { 75, 80, -1, -1 }, { 75, 85, -1, -1 }, { 75, 90, -1, -1 }, { 75, 95, -1, 0 },
				{ 75, 100, -1, 1 }, { 75, 105, -1, 1 }, { 75, 110, -1, 1 }, { 75, 115, -1, 1 }, { 75, 120, -1, 1 },
				{ 75, 125, -1, 1 }, { 75, 130, -1, 2 }, { 75, 135, -1, 2 }, { 75, 140, -1, 2 }, { 75, 145, -1, 2 },
				{ 75, 150, -1, 2 }, { 75, 155, -1, 2 }, { 75, 160, -1, 2 }, { 75, 165, -1, 2 }, { 75, 170, -1, 2 },
				{ 75, 175, -1, 2 }, { 75, 180, 1, 1 }, { 80, 5, 1, 1 }, { 80, 10, 1, 1 }, { 80, 15, -1, -2 },
				{ 80, 20, -1, -2 }, { 80, 25, -1, -2 }, { 80, 30, -1, -2 }, { 80, 35, -1, -2 }, { 80, 40, -1, -2 },
				{ 80, 45, -1, -2 }, { 80, 50, -1, -2 }, { 80, 55, -1, -2 }, { 80, 60, -1, -1 }, { 80, 65, -1, -1 },
				{ 80, 70, -1, -1 }, { 80, 75, -1, -1 }, { 80, 80, -1, -1 }, { 80, 85, -1, -1 }, { 80, 90, -1, -1 },
				{ 80, 95, -1, 0 }, { 80, 100, -1, 1 }, { 80, 105, -1, 1 }, { 80, 110, -1, 1 }, { 80, 115, -1, 1 },
				{ 80, 120, -1, 1 }, { 80, 125, -1, 1 }, { 80, 130, -1, 2 }, { 80, 135, -1, 2 }, { 80, 140, -1, 2 },
				{ 80, 145, -1, 2 }, { 80, 150, -1, 2 }, { 80, 155, -1, 2 }, { 80, 160, -1, 2 }, { 80, 165, -1, 2 },
				{ 80, 170, -1, 2 }, { 80, 175, -1, 2 }, { 80, 180, 1, 1 } };

		int index = 0;
		for (int x = 75; x < 85; x += 5) {
			for (int y = 5; y < 185; y += 5) {
				Ball ball = setupBall(x, y, 1, 1);
				cm.collideLeft(ball, 65, 20, 10, 150);
				int[] expected = expectedValues[index++];

				assertEquals(expected[0], x);
				assertEquals(expected[1], y);
				assertEquals(expected[2], ball.getiX());
				assertEquals(expected[3], ball.getiY());
			}
		}
	}

	@Test
	void testCollideRight() {
		int expectedValues[][] = { { 130, 5, -1, 1 }, { 130, 10, -1, 1 }, { 130, 15, -1, 1 }, { 130, 20, 1, -2 },
				{ 130, 25, 1, -2 }, { 130, 30, 1, -2 }, { 130, 35, 1, -2 }, { 130, 40, 1, -2 }, { 130, 45, 1, -2 },
				{ 130, 50, 1, -2 }, { 130, 55, 1, -2 }, { 130, 60, 1, -1 }, { 130, 65, 1, -1 }, { 130, 70, 1, -1 },
				{ 130, 75, 1, -1 }, { 130, 80, 1, -1 }, { 130, 85, 1, -1 }, { 130, 90, 1, -1 }, { 130, 95, 1, 0 },
				{ 130, 100, 1, 1 }, { 130, 105, 1, 1 }, { 130, 110, 1, 1 }, { 130, 115, 1, 1 }, { 130, 120, 1, 1 },
				{ 130, 125, 1, 1 }, { 130, 130, 1, 1 }, { 130, 135, 1, 1 }, { 130, 140, 1, 2 }, { 130, 145, 1, 2 },
				{ 130, 150, 1, 2 }, { 130, 155, 1, 2 }, { 130, 160, 1, 2 }, { 130, 165, 1, 2 }, { 130, 170, 1, 2 },
				{ 130, 175, -1, 1 }, { 130, 180, -1, 1 }, { 125, 5, -1, 1 }, { 125, 10, -1, 1 }, { 125, 15, -1, 1 },
				{ 125, 20, 1, -2 }, { 125, 25, 1, -2 }, { 125, 30, 1, -2 }, { 125, 35, 1, -2 }, { 125, 40, 1, -2 },
				{ 125, 45, 1, -2 }, { 125, 50, 1, -2 }, { 125, 55, 1, -2 }, { 125, 60, 1, -1 }, { 125, 65, 1, -1 },
				{ 125, 70, 1, -1 }, { 125, 75, 1, -1 }, { 125, 80, 1, -1 }, { 125, 85, 1, -1 }, { 125, 90, 1, -1 },
				{ 125, 95, 1, 0 }, { 125, 100, 1, 1 }, { 125, 105, 1, 1 }, { 125, 110, 1, 1 }, { 125, 115, 1, 1 },
				{ 125, 120, 1, 1 }, { 125, 125, 1, 1 }, { 125, 130, 1, 1 }, { 125, 135, 1, 1 }, { 125, 140, 1, 2 },
				{ 125, 145, 1, 2 }, { 125, 150, 1, 2 }, { 125, 155, 1, 2 }, { 125, 160, 1, 2 }, { 125, 165, 1, 2 },
				{ 125, 170, 1, 2 }, { 125, 175, -1, 1 }, { 125, 180, -1, 1 } };
		int index = 0;
		for (int x = 130; x > 120; x -= 5) {
			for (int y = 5; y < 185; y += 5) {
				Ball ball = setupBall(x, y, -1, 1);
				cm.collideRight(ball, 130, 20, 10, 150);
				int[] expected = expectedValues[index++];
				assertEquals(expected[0], x);
				assertEquals(expected[1], y);
				assertEquals(expected[2], ball.getiX());
				assertEquals(expected[3], ball.getiY());

			}
		}

	}

	private Ball setupBall(int cx, int cy, int iX, int iY) {
		int radius = 8;
		Ball ball = new Ball(900);
		ball.setRadius(radius);
		ball.setiX(iX);
		ball.setiY(iY);
		ball.setX(cx - radius);
		ball.setY(cy - radius);
		ball.setCenterX(cx);
		ball.setCenterY(cy);
		return ball;
	}

}
